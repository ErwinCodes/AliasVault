@page "/user/start"
@using AliasVault.Client.Auth.Components
@using AliasVault.Client.Shared.Components
@inherits AliasVault.Client.Auth.Pages.Base.LoginBase
@layout Auth.Layout.EmptyLayout
@inject Config Config
@attribute [AllowAnonymous]
@using Microsoft.Extensions.Localization

<div class="relative">
    <div class="absolute top-4 right-4 z-10">
        <LanguageSwitcher />
    </div>
</div>

<div class="flex lg:min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="w-full max-w-7xl mx-auto flex flex-col lg:flex-row">
        <div class="hidden lg:flex lg:w-1/2 items-center justify-center p-8">
            <div class="text-white text-4xl font-bold">
                <img src="img/logo.svg" alt="AliasVault" class="w-64 h-64" />
            </div>
        </div>

        <div class="w-full lg:w-1/2 flex items-center justify-center lg:px-8 lg:py-12">
            <div class="w-full max-w-xl p-6 space-y-4">
                <Logo />
                <h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200 mb-6">
                    @Localizer["MainTitle"]
                </h2>
                <p class="text-lg text-gray-600 dark:text-gray-300 mb-8">
                    @Localizer["TaglineText"]
                </p>
                @if (_isHttpWarning)
                {
                    <div class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 mb-6" role="alert">
                        <div class="flex">
                            <div class="py-1">
                                <svg class="fill-current h-6 w-6 text-orange-500 mr-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z"/>
                                </svg>
                            </div>
                            <div>
                                <p class="font-bold">@Localizer["HttpsWarningTitle"]</p>
                                <p class="text-sm">@Localizer["HttpsWarningMessage"]</p>
                            </div>
                        </div>
                    </div>
                }
                <div class="space-y-4">
                    @if (Config.PublicRegistrationEnabled)
                    {
                        <a href="/user/setup" class="block w-full py-3 px-4 bg-primary-600 hover:bg-primary-700 text-white font-semibold rounded-lg transition duration-300 ease-in-out text-center">
                            @Localizer["CreateNewVaultButton"]
                        </a>
                    }
                    <a href="/user/login" class="block w-full py-3 px-4 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-800 text-gray-800 dark:text-white font-semibold rounded-lg transition duration-300 ease-in-out text-center">
                        @Localizer["LoginExistingAccountButton"]
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<Footer ShowBorder="false"></Footer>

@code {
    private IStringLocalizer Localizer => LocalizerFactory.Create("Pages.Auth.Start", "AliasVault.Client");
    private bool _isHttpWarning = false;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await AuthStateProvider.GetAuthenticationStateAsync();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true) {
            // Already authenticated, redirect to home page.
            NavigationManager.NavigateTo("/");
        }

        CheckHttpProtocol();
    }

    /// <summary>
    /// Checks if the current URL is using HTTP and shows warning if needed.
    /// Only shows warning for non-localhost hostnames since browsers allow crypto operations on localhost via HTTP.
    /// </summary>
    private void CheckHttpProtocol()
    {
        var uri = new Uri(NavigationManager.Uri);
        var isLocalhost = uri.Host.Equals("localhost", StringComparison.OrdinalIgnoreCase) ||
                         uri.Host.Equals("127.0.0.1", StringComparison.OrdinalIgnoreCase) ||
                         uri.Host.Equals("::1", StringComparison.OrdinalIgnoreCase);
        _isHttpWarning = uri.Scheme == "http" && !isLocalhost;
    }
}
