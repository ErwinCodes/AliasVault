@inject NavigationManager NavigationManager
@inject IStringLocalizerFactory LocalizerFactory
@using AliasVault.Shared.Core
@using Microsoft.Extensions.Localization
@implements IDisposable

@if (_isHttpWarning)
{
    <div class="fixed bottom-0 left-0 right-0 z-50 bg-orange-500 text-white px-4 py-3">
        <div class="container mx-auto">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                    </svg>
                    <div>
                        <p class="font-medium">@Localizer["HttpsWarningTitle"]</p>
                        <p class="text-sm">@Localizer["HttpsWarningMessage"]</p>
                    </div>
                </div>
                <button @onclick="DismissHttpWarning" class="text-white hover:text-gray-200 ml-4">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>
}

<footer class="relative -z-10 lg:fixed bottom-0 left-0 right-0 dark:bg-gray-900 @(ShowBorder ? "border-t border-gray-200 dark:border-gray-700" : "") @(_isHttpWarning ? "mb-20" : "")">
    <div class="container mx-auto px-4 py-4">
        <div class="flex flex-col lg:flex-row justify-between items-center">
            <p class="text-sm text-center text-gray-500 mb-4 lg:mb-0">
                © @(DateTime.Now.Year) <span>@AppInfo.ApplicationName v@(AppInfo.GetFullVersion())</span>. @Localizer["CopyrightText"]
            </p>
            <div class="hidden lg:block text-center text-gray-400 text-sm">@_randomQuote</div>
            <ul class="flex flex-wrap items-center justify-center">
                <li>
                    <a href="https://github.com/aliasvault/aliasvault" target="_blank" class="text-sm font-normal text-gray-500 hover:underline dark:text-gray-400">GitHub</a>
                </li>
            </ul>
        </div>
    </div>
</footer>

@code {
    /// <summary>
    /// Gets or sets a value indicating whether the footer should have a border.
    /// </summary>
    [Parameter]
    public bool ShowBorder { get; set; } = true;

    private IStringLocalizer Localizer => LocalizerFactory.Create("Layout.Footer", "AliasVault.Client");

    private string[] Quotes =>
    [
        Localizer["TipCreateShortcut"],
        Localizer["TipFindShortcut"],
        Localizer["TipHomeShortcut"],
        Localizer["TipLockShortcut"],
    ];

    private string _randomQuote = string.Empty;
    private bool _isHttpWarning = false;
    private bool _httpWarningDismissed = false;

    /// <inheritdoc />
    public void Dispose()
    {
        NavigationManager.LocationChanged -= RefreshQuote;
        NavigationManager.LocationChanged -= CheckHttpProtocol;
    }

    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _randomQuote = Quotes[Random.Shared.Next(Quotes.Length)];
            NavigationManager.LocationChanged += RefreshQuote;
            NavigationManager.LocationChanged += CheckHttpProtocol;
            CheckHttpProtocol(null, null);
        }
    }

    /// <summary>
    /// Shows a new random quote.
    /// </summary>
    private void RefreshQuote(object? sender, LocationChangedEventArgs e)
    {
        _randomQuote = Quotes[Random.Shared.Next(Quotes.Length)];
        StateHasChanged();
    }

    /// <summary>
    /// Checks if the current URL is using HTTP and shows warning if needed.
    /// Only shows warning for non-localhost hostnames since browsers allow crypto operations on localhost via HTTP.
    /// </summary>
    private void CheckHttpProtocol(object? sender, LocationChangedEventArgs? e)
    {
        var uri = new Uri(NavigationManager.Uri);
        var isLocalhost = uri.Host.Equals("localhost", StringComparison.OrdinalIgnoreCase) || 
                         uri.Host.Equals("127.0.0.1", StringComparison.OrdinalIgnoreCase) ||
                         uri.Host.Equals("::1", StringComparison.OrdinalIgnoreCase);
        _isHttpWarning = !_httpWarningDismissed && uri.Scheme == "http" && !isLocalhost;
        StateHasChanged();
    }

    /// <summary>
    /// Dismisses the HTTP warning.
    /// </summary>
    private void DismissHttpWarning()
    {
        _httpWarningDismissed = true;
        _isHttpWarning = false;
        StateHasChanged();
    }
}
